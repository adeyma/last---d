# -*- coding: utf-8 -*-
"""diabetes-disease.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vi34TmWwF5gj_J-4ezbOoB1mf9O93RJ8
"""

import pandas as pd
import numpy as np

"""## load dataset"""

df = pd.read_csv('Dataset of Diabetes .csv')
df.sample()

df = df.drop(['ID','No_Pation','Gender','AGE'], axis=1)

df.sample()

df.info()

numerical = []
catgcols = []

for col in df.columns :
    if df[col].dtype=="float64":
        numerical.append(col)
    else:
        catgcols.append(col)
for col in df.columns :
    if df[col].dtype=="int64":
        numerical.append(col)
    else:
        catgcols.append(col)
for col in df.columns:
    if col in numerical:
        df[col].fillna(df[col].median(), inplace=True)
    else:
        df[col].fillna(df[col].mode()[0], inplace=True)

df['CLASS'].value_counts()

ind_col = [col for col in df.columns if col != 'CLASS']
dep_col = 'CLASS'

df[dep_col].value_counts()

"""## Transformasi Dataset"""

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()

for col in catgcols:
    df[col] = le.fit_transform(df[col])

df['CLASS'] = le.fit_transform(df['CLASS'])

x = df[ind_col] #feature
y = df[dep_col] #label

df.head()

df.to_csv('diabetes-disease.csv', index=False)

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=0)

"""## Membuat Model Decision Tree"""

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree

dtc = DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',
                             max_depth=4, max_features=None, max_leaf_nodes=None,
                             min_impurity_decrease=0.0, min_samples_leaf=1,
                             min_samples_split=2, min_weight_fraction_leaf=0.0,
                             random_state=42, splitter='best')

model = dtc.fit(x_train, y_train)

dtc_acc = accuracy_score(y_test, dtc.predict(x_test))

print(f"Akurasi Data Training = {accuracy_score(y_train, dtc.predict(x_train))}")
print(f"Akurasi Data Testing = {dtc_acc} \n")

print(f"Confusion Matrix : \n{confusion_matrix(y_test, dtc.predict(x_test))}\n")
confusion = confusion_matrix(y_test, dtc.predict(x_test))

print(f"classification report : \n {classification_report(y_test, dtc.predict(x_test))}")

"""## Simulasi model"""

input_data = (37,26,12,25,5,32,15,4,9)

input_data_as_numpy_array = np.array(input_data)

input_data_reshape = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshape)
print(prediction)

if (prediction[0]==0):
    print ('Patien with Diabetes')
elif((prediction[1]==1)):
    print ('Patien no Diabetes')
else:
    print ('Patien maybe with Diabetes')

"""## Visualisasi Decision Tree"""

import matplotlib.pyplot as plt
fig = plt.figure(figsize=(15,10))
_ = tree.plot_tree(model,
                   feature_names=ind_col,
                   class_names=['Diabetic','Non Diabetic','Maybe Diabetic'],
                   filled=True)